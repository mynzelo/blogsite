name: Auto Squash Merge Previous Release & Create New Release

on:
  schedule:
    # 每天北京时间凌晨 00:10 执行（UTC 前一天 16:10）
    - cron: '10 16 * * *'
  workflow_dispatch:  # 支持手动运行

jobs:
  process-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate dates in Beijing time
        id: date
        run: |
          YESTERDAY=$(TZ=Asia/Shanghai date -d "yesterday" +'%Y%m%d')
          TODAY=$(TZ=Asia/Shanghai date +'%Y%m%d')
          echo "yesterday_branch=release-$YESTERDAY" >> $GITHUB_OUTPUT
          echo "today_branch=release-$TODAY" >> $GITHUB_OUTPUT

      # 检查昨天的分支是否存在
      - name: Check if yesterday's branch exists
        id: check_yesterday
        run: |
          if git ls-remote --exit-code origin refs/heads/${{ steps.date.outputs.yesterday_branch }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 检查是否有更改
      - name: Check if yesterday's branch has changes compared to main
        id: check_changes
        if: steps.check_yesterday.outputs.exists == 'true'
        run: |
          git fetch origin main
          git fetch origin ${{ steps.date.outputs.yesterday_branch }}
          if git diff --quiet origin/main origin/${{ steps.date.outputs.yesterday_branch }}; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      # squash merge 昨天的分支
      - name: Squash merge yesterday's branch into main
        if: steps.check_yesterday.outputs.exists == 'true' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin main
          git fetch origin ${{ steps.date.outputs.yesterday_branch }}
          git checkout main
          git pull origin main
          
          git merge --squash origin/${{ steps.date.outputs.yesterday_branch }}
          git commit -m "Merge ${{ steps.date.outputs.yesterday_branch }} into main (squashed)"
          git push origin main

      - name: Skip merge if yesterday's branch has no changes
        if: steps.check_yesterday.outputs.exists == 'true' && steps.check_changes.outputs.has_changes == 'false'
        run: echo "Yesterday's branch (${{ steps.date.outputs.yesterday_branch }}) has no changes compared to main. Skipping merge."

      - name: Skip merge if yesterday's branch not found
        if: steps.check_yesterday.outputs.exists == 'false'
        run: echo "Yesterday's branch (${{ steps.date.outputs.yesterday_branch }}) does not exist. Skipping merge."

      # 创建今天的分支
      - name: Check if today's branch exists
        id: check_today
        run: |
          if git ls-remote --exit-code origin refs/heads/${{ steps.date.outputs.today_branch }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create today's release branch from main
        if: steps.check_today.outputs.exists == 'false'
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git checkout -b ${{ steps.date.outputs.today_branch }}
          git push origin ${{ steps.date.outputs.today_branch }}

      - name: Skip creating today's branch if exists
        if: steps.check_today.outputs.exists == 'true'
        run: echo "Today's branch (${{ steps.date.outputs.today_branch }}) already exists. Skipping creation."